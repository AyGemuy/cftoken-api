async function getPageTurnstileMin({
  url,
  proxy,
  siteKey
}) {
  const {
    proxyRequest
  } = await import("puppeteer-proxy");
  const {
    RequestInterceptionManager
  } = await import("puppeteer-intercept-and-modify-requests");
  const context = await global.browser.createBrowserContext().catch(() => null);
  const page = await context.newPage();
  const client = await page.target().createCDPSession();
  const interceptManager = new RequestInterceptionManager(client);
  await page.setRequestInterception(true);
  page.on("request", async request => {
    try {
      if ([url, url + "/"].includes(request.url())) return request.abort();
      if (proxy) {
        await proxyRequest({
          page: page,
          proxyUrl: `http://${proxy.username ? `${proxy.username}:${proxy.password}@` : ""}${proxy.host}:${proxy.port}`,
          request: request
        });
      } else {
        request.continue();
      }
    } catch (e) {}
  });
  await interceptManager.intercept({
    urlPattern: url,
    resourceType: "Document",
    modifyResponse({
      body
    }) {
      return {
        body: String(require("fs").readFileSync("./src/data/fakePage.html")).replace(/<site-key>/g, siteKey),
        status: 200
      };
    }
  });
  await page.goto(url);
  return page;
}
async function solveTurnstileMinCallback(page) {
  try {
    await page.addScriptTag({
      content: `
            document.querySelector('#cf-status').value =0;
            window.turnstile.reset();
            console.log('reset')
        `
    });
    await page.waitForFunction(() => {
      return document.querySelector("#cf-status").value == "1" || document.querySelector("#cf-status").value == 1;
    });
    const token = await page.evaluate(() => {
      try {
        var token = document.querySelector('[name="cf-response"]').value;
        console.log(token);
        return token;
      } catch (e) {
        console.error(e);
        return null;
      }
    });
    return token;
  } catch (e) {
    console.error(e);
    return null;
  }
}

function solveTurnstileMin({
  url,
  proxy,
  siteKey
}) {
  return new Promise(async (resolve, reject) => {
    if (!url) return reject("Missing url parameter");
    if (!siteKey) return reject("Missing siteKey parameter");
    const pagepool = await global.page_pool_manager.getPagePool(url);
    if (!pagepool) return reject("Failed to get pagepool,please addPagePool first");
    const token = await pagepool.usePage(solveTurnstileMinCallback);
    if (!token) return reject("Failed to solve turnstile");
    return resolve(token);
  });
}
module.exports = {
  getPageTurnstileMin: getPageTurnstileMin,
  solveTurnstileMin: solveTurnstileMin
};